"use strict";

var _BpGroup = require("../BpGroup");

var _BpGroup2 = _interopRequireDefault(_BpGroup);

var _mocha = require("mocha");

var mocha = _interopRequireWildcard(_mocha);

var _chai = require("chai");

var chai = _interopRequireWildcard(_chai);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Bilinear Pairing", function () {
        describe("Bilinearity Property", function () {
                var G = new _BpGroup2.default();

                // Get group generators
                var g1 = G.gen1;
                var g2 = G.gen2;
                var o = G.order;
                var e = G.pair;

                var x = G.ctx.BIG.randomnum(o, G.rngGen);
                var y = G.ctx.BIG.randomnum(o, G.rngGen);

                // Create G1Elem and G2Elem
                var g1Elem = G.ctx.PAIR.G1mul(g1, x);
                var g2Elem = G.ctx.PAIR.G2mul(g2, y);

                // pairing
                var gt = e(g1Elem, g2Elem);

                var big2 = new G.ctx.BIG(2);
                var big3 = new G.ctx.BIG(3);
                var big4 = new G.ctx.BIG(4);
                var big6 = new G.ctx.BIG(6);
                var big7 = new G.ctx.BIG(7);

                var g1test = G.ctx.PAIR.G1mul(g1Elem, big2);
                var g2test = G.ctx.PAIR.G2mul(g2Elem, big3);

                var gt6_1 = e(g1test, g2test);
                var gt6_2 = G.ctx.PAIR.GTpow(gt, big6);

                it("e(2*g1, 3*g2) == e(g1, g2)^6", function () {
                        chai.assert.isTrue(gt6_1.equals(gt6_2));
                });

                it("e(2*g1, 3*g2) != e(g1, g2)^7", function () {
                        var gt_7 = G.ctx.PAIR.GTpow(gt, big7);
                        chai.assert.isNotTrue(gt6_1.equals(gt_7));
                });

                it("e(3*g1, 4*g2) != e(g1, g2)^6", function () {
                        var g1test_2 = G.ctx.PAIR.G1mul(g1Elem, big3);
                        var g2test_2 = G.ctx.PAIR.G2mul(g2Elem, big4);
                        var gt6_3 = e(g1test_2, g2test_2);

                        chai.assert.isNotTrue(gt6_3.equals(gt6_2));
                });

                it("e(a*g1, g2) == e(g1,g2)^a for random a", function () {
                        var a = G.ctx.BIG.randomnum(o, G.rngGen);
                        var g1_test2 = G.ctx.PAIR.G1mul(g1Elem, a);
                        var gt_1 = e(g1_test2, g2Elem);
                        var gt_2 = G.ctx.PAIR.GTpow(e(g1Elem, g2Elem), a);

                        chai.assert.isTrue(gt_1.equals(gt_2));
                });

                it("e(g1, a*g2) == e(g1,g2)^a for random a", function () {
                        var a = G.ctx.BIG.randomnum(o, G.rngGen);
                        var g2_test2 = G.ctx.PAIR.G2mul(g2Elem, a);
                        var gt_1 = e(g1Elem, g2_test2);
                        var gt_2 = G.ctx.PAIR.GTpow(e(g1Elem, g2Elem), a);

                        chai.assert.isTrue(gt_1.equals(gt_2));
                });

                it("e(a*g1, b*g2) == e(g1, g2)^(a*b) for random (a,b)", function () {
                        var a = G.ctx.BIG.randomnum(o, G.rngGen);
                        var b = G.ctx.BIG.randomnum(o, G.rngGen);

                        var g1_test2 = G.ctx.PAIR.G1mul(g1, a);
                        var g2_test2 = G.ctx.PAIR.G2mul(g2, b);

                        var gt_1 = e(g1_test2, g2_test2);

                        var c = G.ctx.BIG.mul(a, b);
                        c.mod(G.order);

                        var gt_2 = G.ctx.PAIR.GTpow(e(g1, g2), c);

                        chai.assert.isTrue(gt_1.equals(gt_2));
                });
        });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,