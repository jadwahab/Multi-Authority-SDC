'use strict';

var _mocha = require('mocha');

var _chai = require('chai');

var chai = _interopRequireWildcard(_chai);

var _BpGroup = require('../BpGroup');

var _BpGroup2 = _interopRequireDefault(_BpGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

(0, _mocha.describe)('Bilinear Pairing', function () {
  (0, _mocha.describe)('Bilinearity Property', function () {
    var G = new _BpGroup2.default();

    // Get group generators
    var g1 = G.gen1;
    var g2 = G.gen2;
    var o = G.order;
    var e = G.pair;

    var x = G.ctx.BIG.randomnum(o, G.rngGen);
    var y = G.ctx.BIG.randomnum(o, G.rngGen);

    // Create G1Elem and G2Elem
    var g1Elem = G.ctx.PAIR.G1mul(g1, x);
    var g2Elem = G.ctx.PAIR.G2mul(g2, y);

    // pairing
    var gt = e(g1Elem, g2Elem);

    var big2 = new G.ctx.BIG(2);
    var big3 = new G.ctx.BIG(3);
    var big4 = new G.ctx.BIG(4);
    var big6 = new G.ctx.BIG(6);
    var big7 = new G.ctx.BIG(7);

    var g1test = G.ctx.PAIR.G1mul(g1Elem, big2);
    var g2test = G.ctx.PAIR.G2mul(g2Elem, big3);

    var gt6_1 = e(g1test, g2test);
    var gt6_2 = G.ctx.PAIR.GTpow(gt, big6);

    (0, _mocha.it)('e(2*g1, 3*g2) == e(g1, g2)^6', function () {
      chai.assert.isTrue(gt6_1.equals(gt6_2));
    });

    (0, _mocha.it)('e(2*g1, 3*g2) != e(g1, g2)^7', function () {
      var gt_7 = G.ctx.PAIR.GTpow(gt, big7);
      chai.assert.isNotTrue(gt6_1.equals(gt_7));
    });

    (0, _mocha.it)('e(3*g1, 4*g2) != e(g1, g2)^6', function () {
      var g1test_2 = G.ctx.PAIR.G1mul(g1Elem, big3);
      var g2test_2 = G.ctx.PAIR.G2mul(g2Elem, big4);
      var gt6_3 = e(g1test_2, g2test_2);

      chai.assert.isNotTrue(gt6_3.equals(gt6_2));
    });

    (0, _mocha.it)('e(a*g1, g2) == e(g1,g2)^a for random a', function () {
      var a = G.ctx.BIG.randomnum(o, G.rngGen);
      var g1_test2 = G.ctx.PAIR.G1mul(g1Elem, a);
      var gt_1 = e(g1_test2, g2Elem);
      var gt_2 = G.ctx.PAIR.GTpow(e(g1Elem, g2Elem), a);

      chai.assert.isTrue(gt_1.equals(gt_2));
    });

    (0, _mocha.it)('e(g1, a*g2) == e(g1,g2)^a for random a', function () {
      var a = G.ctx.BIG.randomnum(o, G.rngGen);
      var g2_test2 = G.ctx.PAIR.G2mul(g2Elem, a);
      var gt_1 = e(g1Elem, g2_test2);
      var gt_2 = G.ctx.PAIR.GTpow(e(g1Elem, g2Elem), a);

      chai.assert.isTrue(gt_1.equals(gt_2));
    });

    (0, _mocha.it)('e(a*g1, b*g2) == e(g1, g2)^(a*b) for random (a,b)', function () {
      var a = G.ctx.BIG.randomnum(o, G.rngGen);
      var b = G.ctx.BIG.randomnum(o, G.rngGen);

      var g1_test2 = G.ctx.PAIR.G1mul(g1, a);
      var g2_test2 = G.ctx.PAIR.G2mul(g2, b);

      var gt_1 = e(g1_test2, g2_test2);

      var c = G.ctx.BIG.mul(a, b);
      c.mod(G.order);

      var gt_2 = G.ctx.PAIR.GTpow(e(g1, g2), c);

      chai.assert.isTrue(gt_1.equals(gt_2));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L1BhaXJpbmdUZXN0cy5qcyJdLCJuYW1lcyI6WyJjaGFpIiwiRyIsImcxIiwiZ2VuMSIsImcyIiwiZ2VuMiIsIm8iLCJvcmRlciIsImUiLCJwYWlyIiwieCIsImN0eCIsIkJJRyIsInJhbmRvbW51bSIsInJuZ0dlbiIsInkiLCJnMUVsZW0iLCJQQUlSIiwiRzFtdWwiLCJnMkVsZW0iLCJHMm11bCIsImd0IiwiYmlnMiIsImJpZzMiLCJiaWc0IiwiYmlnNiIsImJpZzciLCJnMXRlc3QiLCJnMnRlc3QiLCJndDZfMSIsImd0Nl8yIiwiR1Rwb3ciLCJhc3NlcnQiLCJpc1RydWUiLCJlcXVhbHMiLCJndF83IiwiaXNOb3RUcnVlIiwiZzF0ZXN0XzIiLCJnMnRlc3RfMiIsImd0Nl8zIiwiYSIsImcxX3Rlc3QyIiwiZ3RfMSIsImd0XzIiLCJnMl90ZXN0MiIsImIiLCJjIiwibXVsIiwibW9kIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztJQUFZQSxJOztBQUNaOzs7Ozs7OztBQUVBLHFCQUFTLGtCQUFULEVBQTZCLFlBQU07QUFDakMsdUJBQVMsc0JBQVQsRUFBaUMsWUFBTTtBQUNyQyxRQUFNQyxJQUFJLHVCQUFWOztBQUVBO0FBQ0EsUUFBTUMsS0FBS0QsRUFBRUUsSUFBYjtBQUNBLFFBQU1DLEtBQUtILEVBQUVJLElBQWI7QUFDQSxRQUFNQyxJQUFJTCxFQUFFTSxLQUFaO0FBQ0EsUUFBTUMsSUFBSVAsRUFBRVEsSUFBWjs7QUFFQSxRQUFNQyxJQUFJVCxFQUFFVSxHQUFGLENBQU1DLEdBQU4sQ0FBVUMsU0FBVixDQUFvQlAsQ0FBcEIsRUFBdUJMLEVBQUVhLE1BQXpCLENBQVY7QUFDQSxRQUFNQyxJQUFJZCxFQUFFVSxHQUFGLENBQU1DLEdBQU4sQ0FBVUMsU0FBVixDQUFvQlAsQ0FBcEIsRUFBdUJMLEVBQUVhLE1BQXpCLENBQVY7O0FBRUE7QUFDQSxRQUFNRSxTQUFTZixFQUFFVSxHQUFGLENBQU1NLElBQU4sQ0FBV0MsS0FBWCxDQUFpQmhCLEVBQWpCLEVBQXFCUSxDQUFyQixDQUFmO0FBQ0EsUUFBTVMsU0FBU2xCLEVBQUVVLEdBQUYsQ0FBTU0sSUFBTixDQUFXRyxLQUFYLENBQWlCaEIsRUFBakIsRUFBcUJXLENBQXJCLENBQWY7O0FBRUE7QUFDQSxRQUFNTSxLQUFLYixFQUFFUSxNQUFGLEVBQVVHLE1BQVYsQ0FBWDs7QUFFQSxRQUFNRyxPQUFPLElBQUlyQixFQUFFVSxHQUFGLENBQU1DLEdBQVYsQ0FBYyxDQUFkLENBQWI7QUFDQSxRQUFNVyxPQUFPLElBQUl0QixFQUFFVSxHQUFGLENBQU1DLEdBQVYsQ0FBYyxDQUFkLENBQWI7QUFDQSxRQUFNWSxPQUFPLElBQUl2QixFQUFFVSxHQUFGLENBQU1DLEdBQVYsQ0FBYyxDQUFkLENBQWI7QUFDQSxRQUFNYSxPQUFPLElBQUl4QixFQUFFVSxHQUFGLENBQU1DLEdBQVYsQ0FBYyxDQUFkLENBQWI7QUFDQSxRQUFNYyxPQUFPLElBQUl6QixFQUFFVSxHQUFGLENBQU1DLEdBQVYsQ0FBYyxDQUFkLENBQWI7O0FBRUEsUUFBTWUsU0FBUzFCLEVBQUVVLEdBQUYsQ0FBTU0sSUFBTixDQUFXQyxLQUFYLENBQWlCRixNQUFqQixFQUF5Qk0sSUFBekIsQ0FBZjtBQUNBLFFBQU1NLFNBQVMzQixFQUFFVSxHQUFGLENBQU1NLElBQU4sQ0FBV0csS0FBWCxDQUFpQkQsTUFBakIsRUFBeUJJLElBQXpCLENBQWY7O0FBRUEsUUFBTU0sUUFBUXJCLEVBQUVtQixNQUFGLEVBQVVDLE1BQVYsQ0FBZDtBQUNBLFFBQU1FLFFBQVE3QixFQUFFVSxHQUFGLENBQU1NLElBQU4sQ0FBV2MsS0FBWCxDQUFpQlYsRUFBakIsRUFBcUJJLElBQXJCLENBQWQ7O0FBRUEsbUJBQUcsOEJBQUgsRUFBbUMsWUFBTTtBQUN2Q3pCLFdBQUtnQyxNQUFMLENBQVlDLE1BQVosQ0FBbUJKLE1BQU1LLE1BQU4sQ0FBYUosS0FBYixDQUFuQjtBQUNELEtBRkQ7O0FBSUEsbUJBQUcsOEJBQUgsRUFBbUMsWUFBTTtBQUN2QyxVQUFNSyxPQUFPbEMsRUFBRVUsR0FBRixDQUFNTSxJQUFOLENBQVdjLEtBQVgsQ0FBaUJWLEVBQWpCLEVBQXFCSyxJQUFyQixDQUFiO0FBQ0ExQixXQUFLZ0MsTUFBTCxDQUFZSSxTQUFaLENBQXNCUCxNQUFNSyxNQUFOLENBQWFDLElBQWIsQ0FBdEI7QUFDRCxLQUhEOztBQUtBLG1CQUFHLDhCQUFILEVBQW1DLFlBQU07QUFDdkMsVUFBTUUsV0FBV3BDLEVBQUVVLEdBQUYsQ0FBTU0sSUFBTixDQUFXQyxLQUFYLENBQWlCRixNQUFqQixFQUF5Qk8sSUFBekIsQ0FBakI7QUFDQSxVQUFNZSxXQUFXckMsRUFBRVUsR0FBRixDQUFNTSxJQUFOLENBQVdHLEtBQVgsQ0FBaUJELE1BQWpCLEVBQXlCSyxJQUF6QixDQUFqQjtBQUNBLFVBQU1lLFFBQVEvQixFQUFFNkIsUUFBRixFQUFZQyxRQUFaLENBQWQ7O0FBRUF0QyxXQUFLZ0MsTUFBTCxDQUFZSSxTQUFaLENBQXNCRyxNQUFNTCxNQUFOLENBQWFKLEtBQWIsQ0FBdEI7QUFDRCxLQU5EOztBQVNBLG1CQUFHLHdDQUFILEVBQTZDLFlBQU07QUFDakQsVUFBTVUsSUFBSXZDLEVBQUVVLEdBQUYsQ0FBTUMsR0FBTixDQUFVQyxTQUFWLENBQW9CUCxDQUFwQixFQUF1QkwsRUFBRWEsTUFBekIsQ0FBVjtBQUNBLFVBQU0yQixXQUFXeEMsRUFBRVUsR0FBRixDQUFNTSxJQUFOLENBQVdDLEtBQVgsQ0FBaUJGLE1BQWpCLEVBQXlCd0IsQ0FBekIsQ0FBakI7QUFDQSxVQUFNRSxPQUFPbEMsRUFBRWlDLFFBQUYsRUFBWXRCLE1BQVosQ0FBYjtBQUNBLFVBQU13QixPQUFPMUMsRUFBRVUsR0FBRixDQUFNTSxJQUFOLENBQVdjLEtBQVgsQ0FBaUJ2QixFQUFFUSxNQUFGLEVBQVVHLE1BQVYsQ0FBakIsRUFBb0NxQixDQUFwQyxDQUFiOztBQUVBeEMsV0FBS2dDLE1BQUwsQ0FBWUMsTUFBWixDQUFtQlMsS0FBS1IsTUFBTCxDQUFZUyxJQUFaLENBQW5CO0FBQ0QsS0FQRDs7QUFTQSxtQkFBRyx3Q0FBSCxFQUE2QyxZQUFNO0FBQ2pELFVBQU1ILElBQUl2QyxFQUFFVSxHQUFGLENBQU1DLEdBQU4sQ0FBVUMsU0FBVixDQUFvQlAsQ0FBcEIsRUFBdUJMLEVBQUVhLE1BQXpCLENBQVY7QUFDQSxVQUFNOEIsV0FBVzNDLEVBQUVVLEdBQUYsQ0FBTU0sSUFBTixDQUFXRyxLQUFYLENBQWlCRCxNQUFqQixFQUF5QnFCLENBQXpCLENBQWpCO0FBQ0EsVUFBTUUsT0FBT2xDLEVBQUVRLE1BQUYsRUFBVTRCLFFBQVYsQ0FBYjtBQUNBLFVBQU1ELE9BQU8xQyxFQUFFVSxHQUFGLENBQU1NLElBQU4sQ0FBV2MsS0FBWCxDQUFpQnZCLEVBQUVRLE1BQUYsRUFBVUcsTUFBVixDQUFqQixFQUFvQ3FCLENBQXBDLENBQWI7O0FBRUF4QyxXQUFLZ0MsTUFBTCxDQUFZQyxNQUFaLENBQW1CUyxLQUFLUixNQUFMLENBQVlTLElBQVosQ0FBbkI7QUFDRCxLQVBEOztBQVNBLG1CQUFHLG1EQUFILEVBQXdELFlBQU07QUFDNUQsVUFBTUgsSUFBSXZDLEVBQUVVLEdBQUYsQ0FBTUMsR0FBTixDQUFVQyxTQUFWLENBQW9CUCxDQUFwQixFQUF1QkwsRUFBRWEsTUFBekIsQ0FBVjtBQUNBLFVBQU0rQixJQUFJNUMsRUFBRVUsR0FBRixDQUFNQyxHQUFOLENBQVVDLFNBQVYsQ0FBb0JQLENBQXBCLEVBQXVCTCxFQUFFYSxNQUF6QixDQUFWOztBQUVBLFVBQU0yQixXQUFXeEMsRUFBRVUsR0FBRixDQUFNTSxJQUFOLENBQVdDLEtBQVgsQ0FBaUJoQixFQUFqQixFQUFxQnNDLENBQXJCLENBQWpCO0FBQ0EsVUFBTUksV0FBVzNDLEVBQUVVLEdBQUYsQ0FBTU0sSUFBTixDQUFXRyxLQUFYLENBQWlCaEIsRUFBakIsRUFBcUJ5QyxDQUFyQixDQUFqQjs7QUFFQSxVQUFNSCxPQUFPbEMsRUFBRWlDLFFBQUYsRUFBWUcsUUFBWixDQUFiOztBQUVBLFVBQU1FLElBQUk3QyxFQUFFVSxHQUFGLENBQU1DLEdBQU4sQ0FBVW1DLEdBQVYsQ0FBY1AsQ0FBZCxFQUFpQkssQ0FBakIsQ0FBVjtBQUNBQyxRQUFFRSxHQUFGLENBQU0vQyxFQUFFTSxLQUFSOztBQUVBLFVBQU1vQyxPQUFPMUMsRUFBRVUsR0FBRixDQUFNTSxJQUFOLENBQVdjLEtBQVgsQ0FBaUJ2QixFQUFFTixFQUFGLEVBQU1FLEVBQU4sQ0FBakIsRUFBNEIwQyxDQUE1QixDQUFiOztBQUVBOUMsV0FBS2dDLE1BQUwsQ0FBWUMsTUFBWixDQUFtQlMsS0FBS1IsTUFBTCxDQUFZUyxJQUFaLENBQW5CO0FBQ0QsS0FmRDtBQWdCRCxHQW5GRDtBQW9GRCxDQXJGRCIsImZpbGUiOiJQYWlyaW5nVGVzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIHhpdCB9IGZyb20gJ21vY2hhJztcbmltcG9ydCAqIGFzIGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgQnBHcm91cCBmcm9tICcuLi9CcEdyb3VwJztcblxuZGVzY3JpYmUoJ0JpbGluZWFyIFBhaXJpbmcnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdCaWxpbmVhcml0eSBQcm9wZXJ0eScsICgpID0+IHtcbiAgICBjb25zdCBHID0gbmV3IEJwR3JvdXAoKTtcblxuICAgIC8vIEdldCBncm91cCBnZW5lcmF0b3JzXG4gICAgY29uc3QgZzEgPSBHLmdlbjE7XG4gICAgY29uc3QgZzIgPSBHLmdlbjI7XG4gICAgY29uc3QgbyA9IEcub3JkZXI7XG4gICAgY29uc3QgZSA9IEcucGFpcjtcblxuICAgIGNvbnN0IHggPSBHLmN0eC5CSUcucmFuZG9tbnVtKG8sIEcucm5nR2VuKTtcbiAgICBjb25zdCB5ID0gRy5jdHguQklHLnJhbmRvbW51bShvLCBHLnJuZ0dlbik7XG5cbiAgICAvLyBDcmVhdGUgRzFFbGVtIGFuZCBHMkVsZW1cbiAgICBjb25zdCBnMUVsZW0gPSBHLmN0eC5QQUlSLkcxbXVsKGcxLCB4KTtcbiAgICBjb25zdCBnMkVsZW0gPSBHLmN0eC5QQUlSLkcybXVsKGcyLCB5KTtcblxuICAgIC8vIHBhaXJpbmdcbiAgICBjb25zdCBndCA9IGUoZzFFbGVtLCBnMkVsZW0pO1xuXG4gICAgY29uc3QgYmlnMiA9IG5ldyBHLmN0eC5CSUcoMik7XG4gICAgY29uc3QgYmlnMyA9IG5ldyBHLmN0eC5CSUcoMyk7XG4gICAgY29uc3QgYmlnNCA9IG5ldyBHLmN0eC5CSUcoNCk7XG4gICAgY29uc3QgYmlnNiA9IG5ldyBHLmN0eC5CSUcoNik7XG4gICAgY29uc3QgYmlnNyA9IG5ldyBHLmN0eC5CSUcoNyk7XG5cbiAgICBjb25zdCBnMXRlc3QgPSBHLmN0eC5QQUlSLkcxbXVsKGcxRWxlbSwgYmlnMik7XG4gICAgY29uc3QgZzJ0ZXN0ID0gRy5jdHguUEFJUi5HMm11bChnMkVsZW0sIGJpZzMpO1xuXG4gICAgY29uc3QgZ3Q2XzEgPSBlKGcxdGVzdCwgZzJ0ZXN0KTtcbiAgICBjb25zdCBndDZfMiA9IEcuY3R4LlBBSVIuR1Rwb3coZ3QsIGJpZzYpO1xuXG4gICAgaXQoJ2UoMipnMSwgMypnMikgPT0gZShnMSwgZzIpXjYnLCAoKSA9PiB7XG4gICAgICBjaGFpLmFzc2VydC5pc1RydWUoZ3Q2XzEuZXF1YWxzKGd0Nl8yKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZSgyKmcxLCAzKmcyKSAhPSBlKGcxLCBnMileNycsICgpID0+IHtcbiAgICAgIGNvbnN0IGd0XzcgPSBHLmN0eC5QQUlSLkdUcG93KGd0LCBiaWc3KTtcbiAgICAgIGNoYWkuYXNzZXJ0LmlzTm90VHJ1ZShndDZfMS5lcXVhbHMoZ3RfNykpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2UoMypnMSwgNCpnMikgIT0gZShnMSwgZzIpXjYnLCAoKSA9PiB7XG4gICAgICBjb25zdCBnMXRlc3RfMiA9IEcuY3R4LlBBSVIuRzFtdWwoZzFFbGVtLCBiaWczKTtcbiAgICAgIGNvbnN0IGcydGVzdF8yID0gRy5jdHguUEFJUi5HMm11bChnMkVsZW0sIGJpZzQpO1xuICAgICAgY29uc3QgZ3Q2XzMgPSBlKGcxdGVzdF8yLCBnMnRlc3RfMik7XG5cbiAgICAgIGNoYWkuYXNzZXJ0LmlzTm90VHJ1ZShndDZfMy5lcXVhbHMoZ3Q2XzIpKTtcbiAgICB9KTtcblxuXG4gICAgaXQoJ2UoYSpnMSwgZzIpID09IGUoZzEsZzIpXmEgZm9yIHJhbmRvbSBhJywgKCkgPT4ge1xuICAgICAgY29uc3QgYSA9IEcuY3R4LkJJRy5yYW5kb21udW0obywgRy5ybmdHZW4pO1xuICAgICAgY29uc3QgZzFfdGVzdDIgPSBHLmN0eC5QQUlSLkcxbXVsKGcxRWxlbSwgYSk7XG4gICAgICBjb25zdCBndF8xID0gZShnMV90ZXN0MiwgZzJFbGVtKTtcbiAgICAgIGNvbnN0IGd0XzIgPSBHLmN0eC5QQUlSLkdUcG93KGUoZzFFbGVtLCBnMkVsZW0pLCBhKTtcblxuICAgICAgY2hhaS5hc3NlcnQuaXNUcnVlKGd0XzEuZXF1YWxzKGd0XzIpKTtcbiAgICB9KTtcblxuICAgIGl0KCdlKGcxLCBhKmcyKSA9PSBlKGcxLGcyKV5hIGZvciByYW5kb20gYScsICgpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBHLmN0eC5CSUcucmFuZG9tbnVtKG8sIEcucm5nR2VuKTtcbiAgICAgIGNvbnN0IGcyX3Rlc3QyID0gRy5jdHguUEFJUi5HMm11bChnMkVsZW0sIGEpO1xuICAgICAgY29uc3QgZ3RfMSA9IGUoZzFFbGVtLCBnMl90ZXN0Mik7XG4gICAgICBjb25zdCBndF8yID0gRy5jdHguUEFJUi5HVHBvdyhlKGcxRWxlbSwgZzJFbGVtKSwgYSk7XG5cbiAgICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZShndF8xLmVxdWFscyhndF8yKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZShhKmcxLCBiKmcyKSA9PSBlKGcxLCBnMileKGEqYikgZm9yIHJhbmRvbSAoYSxiKScsICgpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBHLmN0eC5CSUcucmFuZG9tbnVtKG8sIEcucm5nR2VuKTtcbiAgICAgIGNvbnN0IGIgPSBHLmN0eC5CSUcucmFuZG9tbnVtKG8sIEcucm5nR2VuKTtcblxuICAgICAgY29uc3QgZzFfdGVzdDIgPSBHLmN0eC5QQUlSLkcxbXVsKGcxLCBhKTtcbiAgICAgIGNvbnN0IGcyX3Rlc3QyID0gRy5jdHguUEFJUi5HMm11bChnMiwgYik7XG5cbiAgICAgIGNvbnN0IGd0XzEgPSBlKGcxX3Rlc3QyLCBnMl90ZXN0Mik7XG5cbiAgICAgIGNvbnN0IGMgPSBHLmN0eC5CSUcubXVsKGEsIGIpO1xuICAgICAgYy5tb2QoRy5vcmRlcik7XG5cbiAgICAgIGNvbnN0IGd0XzIgPSBHLmN0eC5QQUlSLkdUcG93KGUoZzEsIGcyKSwgYyk7XG5cbiAgICAgIGNoYWkuYXNzZXJ0LmlzVHJ1ZShndF8xLmVxdWFscyhndF8yKSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=